
package services;

import java.util.Collection;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import repositories.TrainerRepository;
import security.LoginService;
import security.UserAccount;
import domain.Actor;
import domain.Trainer;

@Transactional
@Service
public class TrainerService {

	// Managed Repository 
	// ====================================================================================

	@Autowired
	private TrainerRepository	trainerRepository;


	// Constructor methods
	// ====================================================================================

	public TrainerService() {
		super();
	}

	// Simple CRUDS methods 
	// ====================================================================================

	public Trainer findOne(final int id) {

		Assert.isTrue(this.trainerRepository.exists(id));

		return this.trainerRepository.findOne(id);
	}

	public Trainer findOne2(final int id) {

		Assert.isTrue(this.trainerRepository.exists(id));

		return this.trainerRepository.findOne2(id);
	}
	
	public Collection<Trainer> findAll() {

		Collection<Trainer> trainers;

		trainers = this.trainerRepository.findAll();
		Assert.notEmpty(trainers);

		return trainers;
	}

	public Trainer save(final Trainer trainer) {
		Assert.notNull(trainer);

		final Trainer saved = this.trainerRepository.save(trainer);

		return saved;
	}

	public void delete(final Trainer trainer) {
		Assert.notNull(trainer, "Trainer null");
		Assert.isTrue(this.trainerRepository.exists(trainer.getId()), "didn't found");

		this.trainerRepository.delete(trainer);
	}

	// Others bussines methods
	// ====================================================================================

	public Trainer findByPrincipal() {
		Trainer result;

		try {
			final UserAccount userAccount = LoginService.getPrincipal();
			result = this.trainerRepository.findByUserAccountId(userAccount.getId());

		} catch (final Throwable exc) {
			result = null;

		}
		return result;
	}

	public Trainer findByUserAccount(final UserAccount userAccount) {
		Trainer result;

		result = this.trainerRepository.findByUserAccountId(userAccount.getId());

		return result;
	}
}
