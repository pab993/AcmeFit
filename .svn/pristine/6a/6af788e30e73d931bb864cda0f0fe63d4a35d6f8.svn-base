
package controllers.administrator;

import java.util.ArrayList;
import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import services.ActivityService;
import services.CustomerService;
import services.RequestDietService;
import services.TrainerService;
import controllers.AbstractController;
import domain.Customer;
import domain.Trainer;

@Controller
@RequestMapping("/administrator")
public class AdministratorController extends AbstractController {

	// Constructors -----------------------------------------------------------

	public AdministratorController() {
		super();
	}


	// Services
	// ========================================================================
	@Autowired
	private ActivityService		activityService;

	@Autowired
	private RequestDietService	requestDietService;

	@Autowired
	private CustomerService		customerService;

	@Autowired
	private TrainerService		trainerService;


	// DashBoard
	// ============================================================================

	@RequestMapping(value = "/dashboard", method = RequestMethod.GET)
	public ModelAndView list() {

		ModelAndView result;

		String minAvgMaxActivitiesTrainer = "";
		String minAvgMaxDietsByCustomer = "";

		Collection<Trainer> findTrainersMoreActivities = new ArrayList<Trainer>();
		Collection<Trainer> findTrainersOrderByPersonalTrainings = new ArrayList<Trainer>();

		Collection<Customer> rankingCustomersByInvoices = new ArrayList<Customer>();
		Collection<Customer> findCustomerSpentMore70 = new ArrayList<Customer>();

		if (this.activityService.findAll().isEmpty() || this.trainerService.findAll().isEmpty())
			minAvgMaxActivitiesTrainer = "Not available / No disponible";
		else
			minAvgMaxActivitiesTrainer = this.trainerService.minAvgMaxActivitiesTrainer();
		if (this.requestDietService.findAll().isEmpty() || this.customerService.findAll().isEmpty())
			minAvgMaxDietsByCustomer = "Not available / No disponible";
		else
			minAvgMaxDietsByCustomer = this.customerService.minAvgMaxDietsByCustomer();

		if (this.trainerService.findAll().isEmpty())
			findTrainersMoreActivities = new ArrayList<Trainer>();
		else
			findTrainersMoreActivities = this.trainerService.findTrainersMoreActivities();
		if (this.trainerService.findAll().isEmpty())
			findTrainersOrderByPersonalTrainings = new ArrayList<Trainer>();
		else
			findTrainersOrderByPersonalTrainings = this.trainerService.findTrainersOrderByPersonalTrainings();

		if (this.customerService.findAll().isEmpty())
			rankingCustomersByInvoices = new ArrayList<Customer>();
		else
			rankingCustomersByInvoices = this.customerService.rankingCustomersByInvoices();
		if (this.customerService.findAll().isEmpty())
			findCustomerSpentMore70 = new ArrayList<Customer>();
		else
			findCustomerSpentMore70 = this.customerService.findCustomerSpentMore70();

		result = new ModelAndView("administrator/dashboard");

		result.addObject("minAvgMaxActivitiesTrainer", minAvgMaxActivitiesTrainer);
		result.addObject("minAvgMaxDietsByCustomer", minAvgMaxDietsByCustomer);
		result.addObject("findTrainersMoreActivities", findTrainersMoreActivities);
		result.addObject("findTrainersOrderByPersonalTrainings", findTrainersOrderByPersonalTrainings);
		result.addObject("rankingCustomersByInvoices", rankingCustomersByInvoices);
		result.addObject("findCustomerSpentMore70", findCustomerSpentMore70);

		result.addObject("requestURI", "administrator/dashboard.do");

		return result;
	}
}
