
package services;

import java.util.Collection;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import repositories.CompetitionRepository;
import domain.Administrator;
import domain.Competition;

@Transactional
@Service
public class CompetitionService {

	// Repositories
	// ====================================================================

	@Autowired
	private CompetitionRepository	competitionRepository;

	// Supporting services
	// ====================================================================

	@Autowired
	private ActorService			actorService;


	// Simple CRUD methods
	// ====================================================================

	public Competition findOne(final int competitionId) {
		Assert.isTrue(competitionId != 0);
		Competition result;

		result = this.competitionRepository.findOne(competitionId);

		return result;
	}

	public Collection<Competition> findAll() {
		Collection<Competition> result;

		result = this.competitionRepository.findAll();

		return result;
	}

	public Competition create() {
		Assert.isInstanceOf(Administrator.class, this.actorService.findByPrincipal());

		Competition result;

		result = new Competition();

		return result;
	}
	public Competition save(final Competition competition) {
		Assert.notNull(competition);
		Competition result;

		result = this.competitionRepository.save(competition);

		return result;
	}

	// Other business methods
	// ===================================================================

}
