
package controllers;

import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import services.CustomerService;
import services.RequestTrainingService;
import domain.Customer;
import domain.RequestTraining;

@Controller
@RequestMapping("/requestTraining")
public class RequestTrainingController extends AbstractController {

	//Services
	//=======================================================

	@Autowired
	private RequestTrainingService	requestTrainingService;

	@Autowired
	private CustomerService			customerService;


	// Listing RequestTraining with status PENDING
	// ====================================================================================

	@RequestMapping(value = "/myListPending", method = RequestMethod.GET)
	public ModelAndView listRequestTrainingsPending() {
		ModelAndView result;
		Collection<RequestTraining> requestTrainings;
		Customer customer;

		customer = customerService.findByPrincipal();
		requestTrainings = this.requestTrainingService.findAllPendingByCustomer(customer);

		result = new ModelAndView("requestTraining/list");
		result.addObject("requestTrainings", requestTrainings);
		result.addObject("requestURI", "requestTraining/list.do");

		return result;
	}

	// Listing
	// ====================================================================================

	@RequestMapping(value = "/myList", method = RequestMethod.GET)
	public ModelAndView listRequestTrainings() {
		ModelAndView result;
		Collection<RequestTraining> requestTrainings;
		Customer customer;

		customer = customerService.findByPrincipal();
		requestTrainings = this.requestTrainingService.findAllByCustomer(customer);

		result = new ModelAndView("requestTraining/list");
		result.addObject("requestTrainings", requestTrainings);
		result.addObject("requestURI", "requestTraining/list.do");

		return result;
	}

	@RequestMapping(value = "/cancelled", method = RequestMethod.GET)
	public ModelAndView cancelled(@RequestParam int requestDietId) {
		ModelAndView result;

		this.requestTrainingService.cancelled(requestDietId);
		result = this.listRequestTrainingsPending();

		return result;
	}
	// Ancillary Methods
	// ===============================================================================
}
