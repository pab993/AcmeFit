
package controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import services.ActorService;
import services.CreditCardService;
import services.CustomerService;
import services.PersonalTrainingService;
import services.RequestTrainingService;
import domain.Actor;
import domain.CreditCard;
import domain.Customer;
import domain.PersonalTraining;
import domain.RequestTraining;
import forms.RequestTrainingForm;

@Controller
@RequestMapping("/personalTraining")
public class PersonalTrainingController extends AbstractController {

	//Services
	// ===============================================================

	@Autowired
	private PersonalTrainingService	personalTrainingService;

	@Autowired
	private CustomerService			customerService;

	@Autowired
	private ActorService			actorService;

	@Autowired
	private CreditCardService		creditCardService;

	@Autowired
	private RequestTrainingService	requestTrainingService;


	// Constructors
	// ====================================================================================

	public PersonalTrainingController() {
		super();
	}

	//Create
	//======================================================================================

	// Create
	// =======================================================

	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public ModelAndView create(@RequestParam final int personalTrainingId) {
		ModelAndView result;

		final PersonalTraining personalTraining = this.personalTrainingService.findOne(personalTrainingId);

		final RequestTrainingForm requestTrainingForm = new RequestTrainingForm();
		requestTrainingForm.setRequestTrainingId(0);
		requestTrainingForm.setPersonalTraining(personalTraining);
		result = this.createEditModelAndView(requestTrainingForm);

		return result;
	}

	// Application
	// =====================================================================================

	@RequestMapping(value = "/application", method = RequestMethod.GET)
	public ModelAndView application(@RequestParam final int personalTrainingId) {

		ModelAndView result;
		final Customer customer = this.customerService.findByPrincipal();
		final Actor actor = this.actorService.findByPrincipal();
		final PersonalTraining personalTraining = this.personalTrainingService.findOne(personalTrainingId);
		final CreditCard creditCard = this.creditCardService.findByActorId(actor.getId());

		final RequestTraining requestTraining = this.requestTrainingService.findByCustomerAndPersonalTraining(customer.getId(), personalTrainingId);

		if (requestTraining == null) {

			if (creditCard == null || !this.creditCardService.checkValidity(creditCard)) {
				result = new ModelAndView("requestTraining/invalidCreditCard");
				result.addObject("requestURI", "personalTraining/invalidCreditCard.do");
				return result;
			} else
				result = new ModelAndView("redirect:create.do?personalTrainingId=" + personalTrainingId);

		} else {
			result = new ModelAndView("requestTraining/display");
			final RequestTrainingForm requestTrainingForm = this.requestTrainingService.reconstructForm(requestTraining);
			result.addObject("requestTrainingForm", requestTrainingForm);
			result.addObject("requestTrainingStatus", requestTraining.getStatus());
			result.addObject("trainerId", personalTraining.getTrainer().getId());
		}

		return result;
	}

	@RequestMapping(value = "/invalidCreditCard", method = RequestMethod.GET)
	public ModelAndView invalidCreditCard() {
		ModelAndView result;

		result = new ModelAndView("requestTraining/invalidCreditCard");

		return result;
	}

	@RequestMapping(value = "/applicationConfirm", method = RequestMethod.POST, params = "save")
	public ModelAndView save(RequestTrainingForm requestTrainingForm, BindingResult binding) {
		ModelAndView result;

		if (binding.hasErrors())
			result = this.createEditModelAndView(requestTrainingForm);
		else
			try {
				final RequestTraining requestTraining = this.requestTrainingService.reconstruct(requestTrainingForm, binding);
				this.requestTrainingService.save(requestTraining);
				result = new ModelAndView("redirect:/trainer/personalTraining.do?trainerId=" + requestTraining.getPersonalTraining().getTrainer().getId());

			} catch (final Throwable oops) {
				result = this.createEditModelAndView(requestTrainingForm, "error.commit.request");
			}
		return result;

	}

	@RequestMapping(value = "/applicationConfirm", method = RequestMethod.POST, params = "delete")
	public ModelAndView delete(final RequestTrainingForm requestTrainingForm, final BindingResult binding) {
		ModelAndView result;

		final RequestTraining requestTraining = this.requestTrainingService.findOne(requestTrainingForm.getRequestTrainingId());

		try {
			this.requestTrainingService.delete(requestTraining);
			result = new ModelAndView("redirect:/trainer/personalTraining.do?trainerId=" + requestTraining.getPersonalTraining().getTrainer().getId());
		} catch (final Throwable oops) {
			result = this.createEditModelAndView(requestTrainingForm, "error.commit.request");
		}
		return result;
	}

	// Ancillary Methods
	// ===============================================================================

	protected ModelAndView createEditModelAndView(final RequestTrainingForm requestTrainingForm) {
		ModelAndView result;

		result = this.createEditModelAndView(requestTrainingForm, null);
		return result;
	}

	protected ModelAndView createEditModelAndView(final RequestTrainingForm requestTrainingForm, final String message) {
		ModelAndView result;

		result = new ModelAndView("requestTraining/display");

		result.addObject("trainerId", requestTrainingForm.getPersonalTraining().getTrainer().getId());
		result.addObject("requestTrainingForm", requestTrainingForm);
		result.addObject("message", message);

		return result;
	}

}
